part of '${bloc_snake_case}_bloc.dart';

/// The code below will be automatically generated
/// for you by `rx_bloc_generator`.
///
/// This generated class usually resides in [file-name].rxb.g.dart.
/// Find more info at https://pub.dev/packages/rx_bloc_generator.
/// ********************GENERATED CODE**************************************
/// ${bloc_pascal_case}BlocType class used for bloc event and state access from widgets
abstract class ${bloc_pascal_case}BlocType extends RxBlocTypeBase {
  // ignore: public_member_api_docs
  ${bloc_pascal_case}BlocEvents get events;

  // ignore: public_member_api_docs
  ${bloc_pascal_case}BlocStates get states;
}

/// $${blocName}Bloc class - extended by the ${bloc_pascal_case}Bloc bloc
abstract class ${bloc_dollar_pascal_case}Bloc extends RxBlocBase
    implements ${bloc_pascal_case}BlocEvents, ${bloc_pascal_case}BlocStates, ${bloc_pascal_case}BlocType {
  final CompositeSubscription _compositeSubscription = CompositeSubscription();

  @override
  ${bloc_pascal_case}BlocEvents get events => this;

  @override
  ${bloc_pascal_case}BlocStates get states => this;

  /// Dispose of all the opened streams when the bloc is closed.
  @override
  void dispose() {
    _compositeSubscription.dispose();
    super.dispose();
  }
}
/// ********************GENERATED CODE END**************************************